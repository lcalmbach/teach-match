# Generated by Django 5.0.7 on 2024-11-29 06:52

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import school_management.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Name")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Beschreibung"),
                ),
            ],
            options={
                "verbose_name": "Kategorie",
                "verbose_name_plural": "Kategorien",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Communication",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "request_date",
                    models.DateField(
                        default=django.utils.timezone.now, verbose_name="Gesendet am"
                    ),
                ),
                (
                    "request_text",
                    models.TextField(
                        blank=True, max_length=1000, verbose_name="Anfrage"
                    ),
                ),
                (
                    "response_text",
                    models.TextField(
                        blank=True, max_length=1000, verbose_name="Antwort"
                    ),
                ),
                (
                    "response_date",
                    models.DateField(
                        blank=True,
                        default=django.utils.timezone.now,
                        null=True,
                        verbose_name="Antwort am",
                    ),
                ),
                (
                    "comments",
                    models.TextField(
                        blank=True, max_length=1000, verbose_name="Bemerkungen"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DayOfWeek",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Wochentag")),
                ("name_short", models.CharField(max_length=255, verbose_name="Kürzel")),
            ],
            options={
                "verbose_name": "Wochentag",
                "verbose_name_plural": "Wochentage",
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="Level",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Stufen-Name")),
                (
                    "name_short",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Kurz-Name"
                    ),
                ),
                (
                    "cycle_name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Zyklus-Name"
                    ),
                ),
                (
                    "cycle_name_short",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Kurz-Zyklus-Name"
                    ),
                ),
                ("order", models.IntegerField(default=1, verbose_name="Reihenfolge")),
            ],
            options={
                "verbose_name": "Stufe",
                "verbose_name_plural": "Stufen",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Name")),
            ],
            options={
                "verbose_name": "Ort",
                "verbose_name_plural": "Orte",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Qualification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=255, verbose_name="Qualifikation"),
                ),
            ],
            options={
                "verbose_name": "Abschluss",
                "verbose_name_plural": "Abschlüsse",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SchoolYear",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "year_start",
                    models.SmallIntegerField(default=2024, verbose_name="Jahr"),
                ),
                ("start_date", models.DateField(verbose_name="Erster Schultag")),
                ("end_date", models.DateField(verbose_name="Letzter Schultag")),
            ],
            options={
                "verbose_name": "Schuljahr",
                "verbose_name_plural": "Schuljahre",
                "ordering": ["year_start"],
            },
        ),
        migrations.CreateModel(
            name="Semester",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Name")),
                ("start_date", models.DateField(verbose_name="Start Date")),
                ("end_date", models.DateField(verbose_name="End Date")),
            ],
            options={
                "verbose_name": "Semester",
                "verbose_name_plural": "Semester",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Code",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("short_name", models.CharField(max_length=100, verbose_name="Kürzel")),
                ("name", models.CharField(max_length=255, verbose_name="Name")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Beschreibung"),
                ),
                ("order", models.IntegerField(default=1, verbose_name="Reihenfolge")),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="codes",
                        to="school_management.category",
                    ),
                ),
            ],
            options={
                "verbose_name": "Code",
                "verbose_name_plural": "Codes",
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Certificate",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("school_management.code",),
        ),
        migrations.CreateModel(
            name="CommunicationResponseType",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("school_management.code",),
        ),
        migrations.CreateModel(
            name="CommunicationType",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("school_management.code",),
        ),
        migrations.CreateModel(
            name="DayPart",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("school_management.code",),
        ),
        migrations.CreateModel(
            name="FreeHalfDayType",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("school_management.code",),
        ),
        migrations.CreateModel(
            name="Gender",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("school_management.code",),
        ),
        migrations.CreateModel(
            name="SchoolPersonRole",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("school_management.code",),
        ),
        migrations.CreateModel(
            name="SubstitutionCause",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("school_management.code",),
        ),
        migrations.CreateModel(
            name="SubstitutionStatus",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("school_management.code",),
        ),
        migrations.CreateModel(
            name="Application",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("school_management.communication",),
        ),
        migrations.CreateModel(
            name="Invitation",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("school_management.communication",),
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "initials",
                    models.CharField(blank=True, max_length=255, verbose_name="Kürzel"),
                ),
                (
                    "employee_number",
                    models.CharField(
                        blank=True,
                        max_length=12,
                        null=True,
                        verbose_name="Personalnummer",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=255, verbose_name="Vorname"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=255, verbose_name="Nachname"),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=254, verbose_name="Email"),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="Telefonnummer"
                    ),
                ),
                (
                    "year_of_birth",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Jahrgang"
                    ),
                ),
                (
                    "is_teacher",
                    models.BooleanField(default=False, verbose_name="LehrerIn"),
                ),
                (
                    "is_candidate",
                    models.BooleanField(
                        default=False, verbose_name="KandidatIn für Stellvertretung"
                    ),
                ),
                (
                    "is_manager",
                    models.BooleanField(
                        default=False, verbose_name="Leitung/Administration"
                    ),
                ),
                (
                    "send_email",
                    models.BooleanField(
                        default=True, verbose_name="Kommunikation mit Email erwünscht"
                    ),
                ),
                (
                    "send_sms",
                    models.BooleanField(
                        default=True, verbose_name="Kommunikation mit SMS erwünscht"
                    ),
                ),
                (
                    "available_from_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Verfügbar von"
                    ),
                ),
                (
                    "available_to_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Verfügbar bis"
                    ),
                ),
                (
                    "availability_mo_am",
                    models.BooleanField(default=False, verbose_name="Montag Vormittag"),
                ),
                (
                    "availability_tu_am",
                    models.BooleanField(
                        default=False, verbose_name="Dienstag Vormittag"
                    ),
                ),
                (
                    "availability_we_am",
                    models.BooleanField(
                        default=False, verbose_name="Mittwoch Vormittag"
                    ),
                ),
                (
                    "availability_th_am",
                    models.BooleanField(
                        default=False, verbose_name="Donnerstag Vormittag"
                    ),
                ),
                (
                    "availability_fr_am",
                    models.BooleanField(
                        default=False, verbose_name="Freitag Vormittag"
                    ),
                ),
                (
                    "availability_mo_pm",
                    models.BooleanField(
                        default=False, verbose_name="Montag Nachmittag"
                    ),
                ),
                (
                    "availability_tu_pm",
                    models.BooleanField(
                        default=False, verbose_name="Dienstag Nachmittag"
                    ),
                ),
                (
                    "availability_we_pm",
                    models.BooleanField(
                        default=False, verbose_name="Mittwoch Nachmittag"
                    ),
                ),
                (
                    "availability_th_pm",
                    models.BooleanField(
                        default=False, verbose_name="Donnerstag Nachmittag"
                    ),
                ),
                (
                    "availability_fr_pm",
                    models.BooleanField(
                        default=False, verbose_name="Freitag Nachmittag"
                    ),
                ),
                (
                    "availability_comment",
                    models.TextField(
                        blank=True,
                        max_length=1000,
                        verbose_name="Bemerkungen zur Verfügbarkeit",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, max_length=1000, verbose_name="Bemerkungen"
                    ),
                ),
                (
                    "notify_mail_flag",
                    models.BooleanField(
                        default=False, verbose_name="Benachrichtigung per Mail"
                    ),
                ),
                (
                    "notify_sms_flag",
                    models.BooleanField(
                        default=False, verbose_name="Benachrichtigung per SMS"
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Person",
                "verbose_name_plural": "Personen",
                "ordering": ["last_name", "first_name"],
            },
        ),
        migrations.CreateModel(
            name="Candidate",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("school_management.person",),
        ),
        migrations.CreateModel(
            name="Teacher",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("school_management.person",),
        ),
        migrations.CreateModel(
            name="School",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Standort")),
                ("address", models.CharField(max_length=255, verbose_name="Adresse")),
                ("url", models.URLField(blank=True, verbose_name="Webseite")),
                ("plz", models.IntegerField(default=4000, verbose_name="Postleitzahl")),
                (
                    "email",
                    models.EmailField(blank=True, max_length=255, verbose_name="Email"),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Telefonnummer"
                    ),
                ),
                (
                    "mobile",
                    models.CharField(blank=True, max_length=255, verbose_name="Mobile"),
                ),
                (
                    "level",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="levels",
                        to="school_management.level",
                        verbose_name="Stufe",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="locations",
                        to="school_management.location",
                        verbose_name="Ort",
                    ),
                ),
            ],
            options={
                "verbose_name": "Standort",
                "verbose_name_plural": "Standorte",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SchoolClass",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Name")),
                ("year", models.IntegerField(default=1, verbose_name="Jahr")),
                (
                    "school_year",
                    models.IntegerField(default=1, verbose_name="Schuljahr"),
                ),
                (
                    "level",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="class_levels",
                        to="school_management.level",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="class_schools",
                        to="school_management.school",
                    ),
                ),
            ],
            options={
                "verbose_name": "Klasse",
                "verbose_name_plural": "Klassen",
            },
        ),
        migrations.CreateModel(
            name="Subject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Name")),
                (
                    "name_short",
                    models.CharField(blank=True, max_length=255, verbose_name="Kürzel"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "level",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="school_management.level",
                        verbose_name="Stufe",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fach",
                "verbose_name_plural": "Fächer",
                "ordering": ["name"],
            },
        ),
        migrations.AddField(
            model_name="person",
            name="subjects",
            field=models.ManyToManyField(
                blank=True,
                related_name="person_subjects",
                to="school_management.subject",
            ),
        ),
        migrations.CreateModel(
            name="Substitution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_date", models.DateField(verbose_name="Fällt aus von")),
                ("end_date", models.DateField(verbose_name="Fällt aus bis")),
                (
                    "partial_substitution_possible",
                    models.BooleanField(
                        default=False, verbose_name="Teilübernahme möglich"
                    ),
                ),
                (
                    "comment_subsitution",
                    models.TextField(
                        blank=True,
                        max_length=1000,
                        verbose_name="Anmerkung zum Vikariat",
                    ),
                ),
                (
                    "comment_class",
                    models.TextField(
                        blank=True, max_length=1000, verbose_name="Anmerkung zur Klasse"
                    ),
                ),
                (
                    "classes_cli",
                    models.TextField(
                        blank=True, max_length=1000, verbose_name="Klassen"
                    ),
                ),
                (
                    "levels_cli",
                    models.TextField(
                        blank=True, max_length=1000, verbose_name="Stufen"
                    ),
                ),
                (
                    "subjects_cli",
                    models.TextField(
                        blank=True, max_length=1000, verbose_name="Fächer"
                    ),
                ),
                (
                    "summary",
                    models.TextField(
                        blank=True, max_length=1000, verbose_name="Zusammenfassung"
                    ),
                ),
                (
                    "mo_am",
                    models.BooleanField(default=False, verbose_name="Montag Vormittag"),
                ),
                (
                    "mo_pm",
                    models.BooleanField(
                        default=False, verbose_name="Montag Nachmittag"
                    ),
                ),
                (
                    "tu_am",
                    models.BooleanField(
                        default=False, verbose_name="Dienstag Vormittag"
                    ),
                ),
                (
                    "tu_pm",
                    models.BooleanField(
                        default=False, verbose_name="Dienstag Nachmittag"
                    ),
                ),
                (
                    "we_am",
                    models.BooleanField(
                        default=False, verbose_name="Mittwoch Vormittag"
                    ),
                ),
                (
                    "we_pm",
                    models.BooleanField(
                        default=False, verbose_name="Mittwoch Nachmittag"
                    ),
                ),
                (
                    "th_am",
                    models.BooleanField(
                        default=False, verbose_name="Donnerstag Vormittag"
                    ),
                ),
                (
                    "th_pm",
                    models.BooleanField(
                        default=False, verbose_name="Donnerstag Nachmittag"
                    ),
                ),
                (
                    "fr_am",
                    models.BooleanField(
                        default=False, verbose_name="Freitag Vormittag"
                    ),
                ),
                (
                    "fr_pm",
                    models.BooleanField(
                        default=False, verbose_name="Freitag Nachmittag"
                    ),
                ),
                (
                    "created_timestamp",
                    models.DateTimeField(auto_now_add=True, null=True),
                ),
                (
                    "minimum_qualification",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="substitution_certificates",
                        to="school_management.qualification",
                        verbose_name="Mindestabschluss",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="substitution_schools",
                        to="school_management.school",
                        verbose_name="Schule",
                    ),
                ),
                (
                    "cause",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="substitution_causes",
                        to="school_management.substitutioncause",
                        verbose_name="Begründung",
                    ),
                ),
                (
                    "status",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.SET_DEFAULT,
                        related_name="substitution_status",
                        to="school_management.substitutionstatus",
                        verbose_name="Status Besetzung Vikariat",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teacher_substitutions",
                        to="school_management.teacher",
                        verbose_name="Lehrkraft",
                    ),
                ),
            ],
            options={
                "verbose_name": "Stellvertretung",
                "verbose_name_plural": "Stellvertretungen",
            },
        ),
        migrations.AddField(
            model_name="communication",
            name="substitution",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="substitution",
                to="school_management.substitution",
            ),
        ),
        migrations.CreateModel(
            name="TimePeriod",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.CharField(max_length=5, verbose_name="Code")),
                (
                    "start_time",
                    models.CharField(max_length=4, verbose_name="Start Time"),
                ),
                ("end_time", models.CharField(max_length=4, verbose_name="End Date")),
                (
                    "day",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="school_management.dayofweek",
                        verbose_name="Wochentag",
                    ),
                ),
            ],
            options={
                "verbose_name": "Periode",
                "verbose_name_plural": "Perioden",
                "ordering": ["start_time"],
            },
        ),
        migrations.CreateModel(
            name="Timetable",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "frequency",
                    models.IntegerField(default=1, verbose_name="Alle n Wochen"),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lesson_template_schools",
                        to="school_management.school",
                    ),
                ),
                (
                    "school_class",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lesson_template_school_classes",
                        to="school_management.schoolclass",
                    ),
                ),
                (
                    "semester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="timetable_semesters",
                        to="school_management.semester",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lesson_template_subjects",
                        to="school_management.subject",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lessons_template_teachers",
                        to="school_management.person",
                    ),
                ),
                (
                    "time_period",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lesson_template_periods",
                        to="school_management.timeperiod",
                    ),
                ),
            ],
            options={
                "verbose_name": "Lektion-Template",
                "verbose_name_plural": "Lektion-Templates",
            },
        ),
        migrations.CreateModel(
            name="SubstitutionCandidate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "matching_half_days",
                    models.IntegerField(
                        default=0, verbose_name="Übereinstimmende Halbtage"
                    ),
                ),
                (
                    "matching_subjects",
                    models.IntegerField(
                        default=0, verbose_name="Übereinstimmende Fächer"
                    ),
                ),
                (
                    "num_experiences",
                    models.IntegerField(default=0, verbose_name="Anzahl Erfahrungen"),
                ),
                (
                    "num_experiences_in_school",
                    models.IntegerField(
                        default=0, verbose_name="Anzahl Erfahrungen in Schule"
                    ),
                ),
                (
                    "num_experiences_with_class",
                    models.IntegerField(
                        default=0, verbose_name="Anzahl Erfahrungen mit Klasse"
                    ),
                ),
                (
                    "num_experiences_with_subjects",
                    models.IntegerField(
                        default=0, verbose_name="Anzahl Erfahrungen mit Fach"
                    ),
                ),
                ("rating", models.IntegerField(default=1, verbose_name="Bewertung")),
                ("comments", models.TextField(blank=True, verbose_name="Bemerkungen")),
                (
                    "invited_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Einladungsdatum"
                    ),
                ),
                (
                    "response_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Antwort Datum"
                    ),
                ),
                (
                    "record_created_date",
                    models.DateField(
                        default=django.utils.timezone.now, verbose_name="Erstellt am"
                    ),
                ),
                (
                    "candidate",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="substitution_candidates_persons",
                        to="school_management.person",
                    ),
                ),
                (
                    "substitution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="substitution_candidates",
                        to="school_management.substitution",
                    ),
                ),
                (
                    "response_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="substitution_candidate_response_types",
                        to="school_management.communicationresponsetype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Vertretung-KandidatIn",
                "verbose_name_plural": "Vertretung-Kandidaten",
            },
        ),
        migrations.AddField(
            model_name="communication",
            name="response_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="communication_response_type",
                to="school_management.communicationresponsetype",
            ),
        ),
        migrations.AddField(
            model_name="communication",
            name="type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="communication_type",
                to="school_management.communicationtype",
            ),
        ),
        migrations.CreateModel(
            name="Vacation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Bezeichnung")),
                (
                    "date_from",
                    models.DateField(
                        default=django.utils.timezone.now, verbose_name="Von"
                    ),
                ),
                (
                    "date_to",
                    models.DateField(
                        default=django.utils.timezone.now, verbose_name="Bis"
                    ),
                ),
                (
                    "DayPart",
                    models.ForeignKey(
                        default=school_management.models.get_default_time_of_day,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vacation_template_time_of_day",
                        to="school_management.daypart",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ferien",
                "verbose_name_plural": "Ferien",
            },
        ),
        migrations.CreateModel(
            name="SchoolDay",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        default=django.utils.timezone.now, verbose_name="Datum"
                    ),
                ),
                (
                    "vacation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vacation_templates",
                        to="school_management.vacation",
                    ),
                ),
                (
                    "free_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="free_day_type",
                        to="school_management.freehalfdaytype",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="person",
            name="gender",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="school_management.gender",
                verbose_name="Geschlecht",
            ),
        ),
        migrations.CreateModel(
            name="SubstitutionLesson",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "school_class",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lesson_school_classes",
                        to="school_management.schoolclass",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lesson_subjects",
                        to="school_management.subject",
                    ),
                ),
                (
                    "substitution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="substitution_lessons",
                        to="school_management.substitution",
                    ),
                ),
                (
                    "time_period",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lesson_periods",
                        to="school_management.timeperiod",
                    ),
                ),
                (
                    "candidate",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="substitution_lessons_candidates",
                        to="school_management.candidate",
                    ),
                ),
            ],
            options={
                "verbose_name": "Lektion",
                "verbose_name_plural": "Lektionen",
            },
        ),
        migrations.CreateModel(
            name="SubstitutionExecution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="Bewertung",
                    ),
                ),
                (
                    "comments",
                    models.TextField(
                        blank=True, max_length=1000, verbose_name="Kommentar"
                    ),
                ),
                (
                    "substitution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="substitution_executions",
                        to="school_management.substitution",
                    ),
                ),
                (
                    "candidate",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="substitution_executions_candidates",
                        to="school_management.candidate",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="communication",
            name="candidate",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="candidate",
                to="school_management.candidate",
            ),
        ),
    ]
